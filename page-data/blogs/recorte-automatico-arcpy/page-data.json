{"componentChunkName":"component---src-templates-blog-details-js","path":"/blogs/recorte-automatico-arcpy","result":{"data":{"markdownRemark":{"html":"<p>La aplicación de Python en conjunto con ArcGIS permite facilitar numerosos procesos. Una de las tareas más comunes al comenzar un nuevo proyecto corresponde a la necesidad de clipear varios archivos para acotarlos a un área de estudio. En este caso crearemos un script que permitirá, sin necesidad de abrir ArcMap, el \"clip\" o \"recorte\" de todos los archivos .shp en una carpeta arbitraria y las subcarpetas que ésta contenga. Para este proceso se usará el módulo os, que permite interactuar con el sistema operativo y ArcPy para el geoprocesamiento.</p>\n<p><em>Nota: Las versiones preliminares a ArcGIS Pro estan basadas en Python 2.7, por lo que algunas de las sintaxis variarán respecto a las versiones más recientes. Resultados similares pueden lograrse mediante la librería geopandas.</em></p>\n<p>Necesitaremos importar en primer lugar:</p>\n<deckgo-highlight-code language=\"python\" terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  >\n          <code slot=\"code\">import os\r\nfrom os.path import basename, join, splitext\r\nimport arcpy</code>\n        </deckgo-highlight-code>\n<h2>Encontrando los archivos de formato shape (.shp)</h2>\n<p>El primer paso corresponde a encontrar todos los archivos de formato .shp existentes en un carpeta y las subcarpetas que esta contenga, para ello se crea una función que dada una carpeta arbitraria nos entregue una lista con las rutas de los archivos a clipear:</p>\n<deckgo-highlight-code language=\"python\" terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  >\n          <code slot=\"code\">def shape_finder(carpeta):\r\n    lista_rutas_shp = []\r\n    for rutas, carpetas, archivos in os.walk(carpeta):\r\n        for archivo in archivos:\r\n            if splitext(archivo)[1] == &#39;.shp&#39;:\r\n                lista_rutas_shp.append(join(rutas, archivo))\r\n    return lista_rutas_shp\r\n\r\n# Lista de carpetas a partir de input\r\ncarpeta_entrada = raw_input(&#39;Ruta de la carpeta con shapes a clipear: &#39;)\r\nlista_rutas_shp = shape_finder(carpeta_entrada)</code>\n        </deckgo-highlight-code>\n<p>Dentro de la función <code>shape_finder()</code> se crea en primer lugar una lista que guardará las rutas de todos los archivos de terminación \".shp\" presentes (<code>lista_rutas_shp</code>). Para navegar la carpeta de entrada en busca de los shape se utiliza el método <code>os.walk()</code>, el cual entrega todas las rutas, y las carpetas y archivos asociados. En este caso nos interesan solo los archivos de terminación .shp, para filtrarlos utilizamos <code>os.path.splitext()</code> que entrega el nombre y extensión del archivo, y en donde utilizaremos solo la extension (correspondiente al segundo elemento, de índice 1).</p>\n<p>La ruta de nuestro shape corresponde a la ruta de la carpeta donde se encuentra sumado al nombre del archivo, los que son unidos mediante <code>os.path.join()</code>, para ser luego agregados a nuestra lista mediante <code>append()</code>. Por último, para poder ingresar la carpeta deseada al momento de ejecutar el script asignamos nuestra carpeta de entrada a un input (<code>raw_input</code>) y posteriormente ejecutamos la función y guardamos la lista en una variable (<code>lista_rutas_shp</code>).</p>\n<h2>Realizando el clip con ArcPy</h2>\n<p>Con la lista de rutas procedemos a utilizar ArcPy para el proceso de clip, ArcPy nos permite acceder a las herramientas normalmente disponibles desde la ArcToolbox, los detalles de la herramienta clip y ejemplos pueden ser revisados en la <a href=\"https://desktop.arcgis.com/es/arcmap/10.3/tools/analysis-toolbox/clip.htm\">página oficial de ESRI</a>, donde se indica que la sintaxis sigue el formato:</p>\n<deckgo-highlight-code language=\"python\" terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  >\n          <code slot=\"code\">Clip_analysis (in_features, clip_features, out_feature_class, {cluster_tolerance})</code>\n        </deckgo-highlight-code>\n<p>Donde <code>in_features</code> corresponden a las entidades a recortar, <code>clip_features</code> al objeto que recorta y <code>out_feature_class</code> a la entidad a crear. En este caso nuestras entidades a recortar corresponde a cada uno de los elementos de la lista de shapes, el archivo de clip será a elección, y la entidad de salida se designará con el nombre de \"clip_\" + nombre del archivo (obtenido mediante <code>os.path.basename</code>) y asociado a una carpeta donde dejaremos todos nuestros nuevos archivos recortados (<code>carpeta_salida</code>). Así:</p>\n<deckgo-highlight-code language=\"python\" terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  >\n          <code slot=\"code\">archivo_clip = raw_input(&#39;Ruta del archivo a utilizar para el recorte: &#39;)\r\n\r\ncarpeta_salida = raw_input(&#39;Ruta de la carpeta de salida: &#39;)\r\n\r\nfor shape in lista_rutas_shp:\r\n    ruta_archivo_salida = join(carpeta_salida, &#39;clip_&#39; + basename(shape))\r\n    arcpy.Clip_analysis(shape, archivo_clip, ruta_archivo_salida) \r\n    print(&#39;{shp_nombre} clip exitoso!&#39;.format(shp_nombre=basename(shape)))</code>\n        </deckgo-highlight-code>\n<p>Finalmente podemos guardar nuestro script en el lugar que deseeamos, y posteriormente ser ejecutado en la consola con el interprete de python asociado a la versión de ArcGIS instalada, resultando en algo similar a:</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  >\n          <code slot=\"code\">C:\\Python27\\ArcGIS10.5\\python.exe C:/Users/usuario/PythonProjects/arcgisscriptclip/clipper.py</code>\n        </deckgo-highlight-code>","frontmatter":{"stack":"Python","tags":"Python, SIG, ArcGIS","title":"Recorte automático de shapefiles con ArcPy"}}},"pageContext":{"slug":"recorte-automatico-arcpy"}},"staticQueryHashes":[]}